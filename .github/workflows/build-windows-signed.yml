name: Build Signed Windows MSI

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        type: string
      create_release:
        description: 'Create GitHub release'
        required: false
        default: true
        type: boolean

jobs:
  build-signed-msi:
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
          
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          
      - name: Install WiX Toolset
        run: |
          # Try chocolatey first (most reliable)
          try {
            Write-Host "Installing WiX via Chocolatey..."
            choco install wixtoolset -y --version=3.11.2
            $wixDir = "${env:ProgramFiles(x86)}\WiX Toolset v3.11\bin"
            if (Test-Path $wixDir) {
              echo "$wixDir" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
              echo "WIX=$wixDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
              Write-Host "WiX installed via Chocolatey successfully"
              exit 0
            }
          } catch {
            Write-Host "Chocolatey installation failed, trying manual download..."
          }
          
          # Fallback to manual download with retry logic
          $wixUrl = "https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311-binaries.zip"
          $wixZip = "$env:TEMP\wix311-binaries.zip"
          $wixDir = "C:\wix311"
          $maxRetries = 3
          $retryCount = 0
          
          do {
            try {
              $retryCount++
              Write-Host "Downloading WiX Toolset (attempt $retryCount/$maxRetries)..."
              
              # Remove existing files if they exist
              if (Test-Path $wixZip) { Remove-Item $wixZip -Force }
              if (Test-Path $wixDir) { Remove-Item $wixDir -Recurse -Force }
              
              # Download with progress and timeout
              $webClient = New-Object System.Net.WebClient
              $webClient.DownloadFile($wixUrl, $wixZip)
              
              # Verify download
              if (-not (Test-Path $wixZip) -or (Get-Item $wixZip).Length -eq 0) {
                throw "Download failed or file is empty"
              }
              
              Write-Host "Extracting WiX Toolset..."
              New-Item -ItemType Directory -Path $wixDir -Force
              Expand-Archive -Path $wixZip -DestinationPath $wixDir -Force
              
              # Verify extraction
              if (-not (Test-Path "$wixDir\candle.exe") -or -not (Test-Path "$wixDir\light.exe")) {
                throw "WiX extraction failed - required executables not found"
              }
              
              Write-Host "WiX Toolset downloaded and extracted successfully"
              break
            } catch {
              Write-Host "Attempt $retryCount failed: $($_.Exception.Message)"
              if ($retryCount -ge $maxRetries) {
                Write-Error "Failed to download WiX Toolset after $maxRetries attempts"
                exit 1
              }
              Start-Sleep -Seconds 5
            }
          } while ($retryCount -lt $maxRetries)
          
          Write-Host "Adding WiX to PATH..."
          echo "$wixDir" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          Write-Host "Setting WiX environment variables..."
          echo "WIX=$wixDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "WIX_TOOLSET_PATH=$wixDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          Write-Host "Verifying WiX installation..."
          if (Test-Path "$wixDir\candle.exe" -and Test-Path "$wixDir\light.exe") {
            & "$wixDir\candle.exe" -? | Select-Object -First 3
            & "$wixDir\light.exe" -? | Select-Object -First 3
            Write-Host "WiX installation verified successfully"
            
            # List all files in WiX directory for debugging
            Write-Host "WiX directory contents:"
            Get-ChildItem $wixDir | ForEach-Object { Write-Host "  $($_.Name)" }
          } else {
            Write-Error "WiX installation failed - required executables not found"
            if (Test-Path $wixDir) {
              Write-Host "Directory contents:"
              Get-ChildItem $wixDir -Recurse | ForEach-Object { Write-Host "  $($_.FullName)" }
            }
            exit 1
          }
          
      - name: Setup code signing certificate
        if: ${{ secrets.WINDOWS_CERTIFICATE }}
        run: |
          echo "${{ secrets.WINDOWS_CERTIFICATE }}" | base64 --decode > certificate.p12
          echo "TAURI_PRIVATE_KEY=$(cat certificate.p12 | base64 -w 0)" >> $env:GITHUB_ENV
          echo "TAURI_KEY_PASSWORD=${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}" >> $env:GITHUB_ENV
        shell: bash
        
      - name: Install frontend dependencies
        run: npm ci
        
      - name: Build frontend
        run: npm run build:prod
        
      - name: Verify WiX Environment Before Build
        run: |
          Write-Host "Verifying WiX environment before build..."
          Write-Host "WIX: $env:WIX"
          Write-Host "WIX_TOOLSET_PATH: $env:WIX_TOOLSET_PATH"
          Write-Host "PATH contains WiX: $($env:PATH -like '*wix311*')"
          
          # Verify WiX executables are accessible
          $wixDir = "C:\wix311"
          if (Test-Path "$wixDir\candle.exe") {
            Write-Host "✓ candle.exe found and accessible"
            & "$wixDir\candle.exe" -? 2>&1 | Select-Object -First 2
          } else {
            Write-Error "✗ candle.exe not found at $wixDir\candle.exe"
            exit 1
          }
          
          if (Test-Path "$wixDir\light.exe") {
            Write-Host "✓ light.exe found and accessible"
            & "$wixDir\light.exe" -? 2>&1 | Select-Object -First 2
          } else {
            Write-Error "✗ light.exe not found at $wixDir\light.exe"
            exit 1
          }
          
          Write-Host "WiX environment verification completed successfully"
          
      - name: Build and sign Tauri MSI
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ env.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ env.TAURI_KEY_PASSWORD }}
          WIX: C:\wix311
          WIX_TOOLSET_PATH: C:\wix311
          PATH: C:\wix311;${{ env.PATH }}
          # Additional environment variables for WiX
          WIXUI_INSTALLDIR: C:\wix311
          WIX_TEMP: ${{ runner.temp }}\wix
        with:
          tagName: ${{ github.event.inputs.version }}
          releaseName: "Clipify ${{ github.event.inputs.version }}"
          releaseBody: |
            ## 🚀 Clipify ${{ github.event.inputs.version }} - Signed Windows Release
            
            This is a **signed** Windows MSI installer for production use.
            
            ### 📦 Installation
            1. Download the `.msi` file from the assets below
            2. Run the installer (no administrator rights required for signed version)
            3. Follow the installation wizard
            
            ### ✨ Features
            - 🔥 Global hotkey support (Cmd+Shift+C)
            - 🤖 AI-powered text cleanup and rephrasing
            - 🔐 Secure authentication with JWT tokens
            - 📍 System tray integration
            - ✅ Code-signed for security and trust
            
            ### 💻 System Requirements
            - Windows 10 version 1903 or later
            - Microsoft Edge WebView2 (automatically installed if missing)
            
            ### 🔒 Security
            This release is digitally signed and verified for authenticity.
          releaseDraft: ${{ !github.event.inputs.create_release }}
          prerelease: false
          includeDebug: false
          includeRelease: true
          args: --bundles msi --config src-tauri/tauri.conf.json --verbose
          
      - name: Upload signed MSI artifact
        uses: actions/upload-artifact@v4
        with:
          name: clipify-windows-signed-msi-${{ github.event.inputs.version }}
          path: src-tauri/target/release/bundle/msi/*.msi
          retention-days: 90
          
      - name: Verify signature
        if: ${{ secrets.WINDOWS_CERTIFICATE }}
        run: |
          echo "Verifying MSI signature..."
          Get-ChildItem -Path "src-tauri/target/release/bundle/msi/" -Filter "*.msi" | ForEach-Object {
            echo "Checking signature for: $($_.Name)"
            Get-AuthenticodeSignature $_.FullName | Format-List
          }
          
      - name: Build summary
        run: |
          echo "## 🎉 Build Summary" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $env:GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $env:GITHUB_STEP_SUMMARY
          echo "| Version | ${{ github.event.inputs.version }} |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Signed | ${{ secrets.WINDOWS_CERTIFICATE != '' }} |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Release Created | ${{ github.event.inputs.create_release }} |" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "### 📁 Generated Files:" >> $env:GITHUB_STEP_SUMMARY
          Get-ChildItem -Path "src-tauri/target/release/bundle/msi/" -Filter "*.msi" | ForEach-Object { 
            $sizeInMB = [math]::Round($_.Length / 1MB, 2)
            echo "- **$($_.Name)** ($sizeInMB MB)" >> $env:GITHUB_STEP_SUMMARY
          }
