name: Build Signed Windows MSI

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        type: string
      create_release:
        description: 'Create GitHub release'
        required: false
        default: true
        type: boolean

jobs:
  build-signed-msi:
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
          
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          
      - name: Install WiX Toolset
        run: |
          Write-Host "Installing WiX Toolset v3.11.2..."
          
          # Use official WiX installer for better reliability
          $wixInstallerUrl = "https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311.exe"
          $wixInstaller = "$env:TEMP\wix311.exe"
          $wixDir = "${env:ProgramFiles(x86)}\WiX Toolset v3.11\bin"
          
          # Download WiX installer
          Write-Host "Downloading WiX installer..."
          Invoke-WebRequest -Uri $wixInstallerUrl -OutFile $wixInstaller -UseBasicParsing
          
          # Install WiX silently
          Write-Host "Installing WiX Toolset..."
          Start-Process -FilePath $wixInstaller -ArgumentList "/quiet" -Wait -NoNewWindow
          
          # Verify installation
          if (Test-Path $wixDir) {
            Write-Host "WiX installed successfully at: $wixDir"
          } else {
            # Fallback to manual binary download
            Write-Host "Installer failed, trying manual binary download..."
            $wixBinUrl = "https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311-binaries.zip"
            $wixZip = "$env:TEMP\wix311-binaries.zip"
            $wixDir = "C:\wix311"
            
            Invoke-WebRequest -Uri $wixBinUrl -OutFile $wixZip -UseBasicParsing
            New-Item -ItemType Directory -Path $wixDir -Force
            Expand-Archive -Path $wixZip -DestinationPath $wixDir -Force
          }
          
          # Set environment variables
          Write-Host "Setting WiX environment variables..."
          echo "$wixDir" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "WIX=$wixDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "WIX_TOOLSET_PATH=$wixDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          # Verify WiX tools
          Write-Host "Verifying WiX installation..."
          if ((Test-Path "$wixDir\candle.exe") -and (Test-Path "$wixDir\light.exe")) {
            Write-Host "✅ WiX tools found:"
            Write-Host "  - candle.exe: $(Test-Path "$wixDir\candle.exe")"
            Write-Host "  - light.exe: $(Test-Path "$wixDir\light.exe")"
            
            # Test WiX tools
            try {
              & "$wixDir\candle.exe" -? 2>$null | Select-Object -First 1
              & "$wixDir\light.exe" -? 2>$null | Select-Object -First 1
              Write-Host "✅ WiX tools are functional"
            } catch {
              Write-Warning "WiX tools installed but may have issues: $_"
            }
          } else {
            Write-Error "❌ WiX installation failed - required tools not found"
            Write-Host "Expected location: $wixDir"
            Write-Host "Contents of directory:"
            if (Test-Path $wixDir) {
              Get-ChildItem $wixDir | Format-Table Name, Length
            } else {
              Write-Host "Directory does not exist"
            }
            exit 1
          }
          
      - name: Setup code signing certificate
        if: ${{ secrets.WINDOWS_CERTIFICATE }}
        run: |
          echo "${{ secrets.WINDOWS_CERTIFICATE }}" | base64 --decode > certificate.p12
          echo "TAURI_PRIVATE_KEY=$(cat certificate.p12 | base64 -w 0)" >> $env:GITHUB_ENV
          echo "TAURI_KEY_PASSWORD=${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}" >> $env:GITHUB_ENV
        shell: bash
        
      - name: Install frontend dependencies
        run: npm ci
        
      - name: Build frontend
        run: npm run build:prod
        
      - name: Build and sign Tauri MSI
        run: |
          Write-Host "Starting signed Tauri MSI build..."
          
          # Ensure WiX is in PATH for this step
          $wixPath = if (Test-Path "${env:ProgramFiles(x86)}\WiX Toolset v3.11\bin") {
            "${env:ProgramFiles(x86)}\WiX Toolset v3.11\bin"
          } else {
            "C:\wix311"
          }
          
          $env:PATH = "$wixPath;$env:PATH"
          $env:WIX = $wixPath
          $env:WIX_TOOLSET_PATH = $wixPath
          
          Write-Host "WiX Path: $wixPath"
          Write-Host "PATH: $env:PATH"
          Write-Host "Code signing: $($env:TAURI_PRIVATE_KEY -ne $null)"
          
          # Verify WiX is accessible
          Write-Host "Verifying WiX accessibility..."
          try {
            $candleVersion = & "$wixPath\candle.exe" -? 2>$null | Select-Object -First 1
            Write-Host "✅ Candle.exe accessible: $candleVersion"
          } catch {
            Write-Error "❌ Cannot access candle.exe: $_"
            exit 1
          }
          
          # Build with Tauri CLI directly
          Write-Host "Building signed MSI package..."
          try {
            npm run tauri:build -- --bundles msi --verbose
            Write-Host "✅ Signed MSI build completed successfully"
          } catch {
            Write-Error "❌ Signed MSI build failed: $_"
            Write-Host "Build logs:"
            Get-Content "src-tauri/target/release/build.log" -ErrorAction SilentlyContinue
            exit 1
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ env.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ env.TAURI_KEY_PASSWORD }}
          
      - name: Create GitHub Release
        if: ${{ github.event.inputs.create_release == true }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: "Clipify ${{ github.event.inputs.version }}"
          body: |
            ## 🚀 Clipify ${{ github.event.inputs.version }} - Signed Windows Release
            
            This is a **signed** Windows MSI installer for production use.
            
            ### 📦 Installation
            1. Download the `.msi` file from the assets below
            2. Run the installer (no administrator rights required for signed version)
            3. Follow the installation wizard
            
            ### ✨ Features
            - 🔥 Global hotkey support (Cmd+Shift+C)
            - 🤖 AI-powered text cleanup and rephrasing
            - 🔐 Secure authentication with JWT tokens
            - 📍 System tray integration
            - ✅ Code-signed for security and trust
            
            ### 💻 System Requirements
            - Windows 10 version 1903 or later
            - Microsoft Edge WebView2 (automatically installed if missing)
            
            ### 🔒 Security
            This release is digitally signed and verified for authenticity.
          draft: ${{ !github.event.inputs.create_release }}
          prerelease: false
          files: |
            src-tauri/target/release/bundle/msi/*.msi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload signed MSI artifact
        uses: actions/upload-artifact@v4
        with:
          name: clipify-windows-signed-msi-${{ github.event.inputs.version }}
          path: src-tauri/target/release/bundle/msi/*.msi
          retention-days: 90
          
      - name: Verify signature
        if: ${{ secrets.WINDOWS_CERTIFICATE }}
        run: |
          echo "Verifying MSI signature..."
          Get-ChildItem -Path "src-tauri/target/release/bundle/msi/" -Filter "*.msi" | ForEach-Object {
            echo "Checking signature for: $($_.Name)"
            Get-AuthenticodeSignature $_.FullName | Format-List
          }
          
      - name: Build summary
        run: |
          echo "## 🎉 Build Summary" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $env:GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $env:GITHUB_STEP_SUMMARY
          echo "| Version | ${{ github.event.inputs.version }} |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Signed | ${{ secrets.WINDOWS_CERTIFICATE != '' }} |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Release Created | ${{ github.event.inputs.create_release }} |" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "### 📁 Generated Files:" >> $env:GITHUB_STEP_SUMMARY
          Get-ChildItem -Path "src-tauri/target/release/bundle/msi/" -Filter "*.msi" | ForEach-Object { 
            $sizeInMB = [math]::Round($_.Length / 1MB, 2)
            echo "- **$($_.Name)** ($sizeInMB MB)" >> $env:GITHUB_STEP_SUMMARY
          }
