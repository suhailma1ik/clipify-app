name: Build Windows MSI

on:
  workflow_dispatch:
    inputs:
      release:
        description: 'Create release'
        required: false
        default: false
        type: boolean
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: false
        default: ''
        type: string
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]

jobs:
  build-windows-msi:
    runs-on: windows-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
          
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          
      - name: Install WiX Toolset
        run: |
          Write-Host "Installing WiX Toolset v3.14.1 (matching Tauri expectations)..."
          
          # Download WiX 3.14.1 binaries directly (matches what Tauri expects)
          $wixBinUrl = "https://github.com/wixtoolset/wix3/releases/download/wix3141rtm/wix314-binaries.zip"
          $wixZip = "$env:TEMP\wix314-binaries.zip"
          $wixDir = "C:\wix314"
          
          # Download and extract WiX binaries
          Write-Host "Downloading WiX 3.14.1 binaries..."
          Invoke-WebRequest -Uri $wixBinUrl -OutFile $wixZip -UseBasicParsing
          
          Write-Host "Extracting WiX binaries..."
          New-Item -ItemType Directory -Path $wixDir -Force
          Expand-Archive -Path $wixZip -DestinationPath $wixDir -Force
          
          # Set environment variables for current and future steps
          Write-Host "Setting WiX environment variables..."
          echo "$wixDir" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "WIX=$wixDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "WIX_TOOLSET_PATH=$wixDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          # Verify WiX tools installation
          Write-Host "Verifying WiX installation..."
          if ((Test-Path "$wixDir\candle.exe") -and (Test-Path "$wixDir\light.exe")) {
            Write-Host "✅ WiX tools found:"
            Write-Host "  - candle.exe: $(Test-Path "$wixDir\candle.exe")"
            Write-Host "  - light.exe: $(Test-Path "$wixDir\light.exe")"
            
            # Test WiX tools functionality
            try {
              $candleVersion = & "$wixDir\candle.exe" -? 2>&1 | Select-Object -First 1
              Write-Host "✅ Candle version: $candleVersion"
              
              $lightVersion = & "$wixDir\light.exe" -? 2>&1 | Select-Object -First 1  
              Write-Host "✅ Light version: $lightVersion"
              
              Write-Host "✅ WiX 3.14.1 tools are functional"
            } catch {
              Write-Warning "WiX tools installed but may have issues: $_"
            }
          } else {
            Write-Error "❌ WiX installation failed - required tools not found"
            Write-Host "Expected location: $wixDir"
            Write-Host "Contents of directory:"
            if (Test-Path $wixDir) {
              Get-ChildItem $wixDir | Format-Table Name, Length
            } else {
              Write-Host "Directory does not exist"
            }
            exit 1
          }
          
      - name: Determine version
        id: version
        run: |
          if ("${{ github.event.inputs.version }}" -ne "") {
            $version = "${{ github.event.inputs.version }}"
          } elseif ("${{ github.ref_type }}" -eq "tag") {
            $version = "${{ github.ref_name }}"
          } else {
            $version = "v0.1.0-dev"
          }
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "Version: $version"
          
      - name: Install frontend dependencies
        run: npm ci
        
      - name: Build frontend
        run: npm run build:prod
        
      - name: Build Tauri MSI
        run: |
          Write-Host "Starting Tauri MSI build..."
          
          # Verify WiX is accessible (should be set from previous step)
          Write-Host "Current WiX environment:"
          Write-Host "  WIX: $env:WIX"
          Write-Host "  WIX_TOOLSET_PATH: $env:WIX_TOOLSET_PATH"
          Write-Host "  PATH contains WiX: $($env:PATH -like '*wix*')"
          
          # Quick verification that WiX tools are accessible
          try {
            $candleTest = & "candle.exe" -? 2>&1 | Select-Object -First 1
            Write-Host "✅ WiX tools accessible via PATH"
          } catch {
            Write-Host "⚠️ WiX not in PATH, but should be available via environment variables"
          }
          
          # Build MSI package with Tauri CLI
          Write-Host "Building MSI package..."
          npm run tauri:build -- --bundles msi --verbose
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create GitHub Release
        if: ${{ github.event.inputs.release == 'true' || github.ref_type == 'tag' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: "Clipify ${{ steps.version.outputs.version }}"
          body: |
            ## Windows MSI Installer
            
            This release includes a Windows MSI installer for Clipify.
            
            ### Installation
            1. Download the `.msi` file from the assets below
            2. Run the installer as administrator
            3. Follow the installation wizard
            
            ### Features
            - Global hotkey support (Cmd+Shift+C)
            - AI-powered text cleanup and rephrasing
            - Secure authentication with JWT tokens
            - System tray integration
            
            ### System Requirements
            - Windows 10 or later
            - Microsoft Edge WebView2 (automatically installed if missing)
          draft: ${{ github.event.inputs.release != 'true' }}
          prerelease: ${{ contains(steps.version.outputs.version, 'dev') || contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') }}
          files: |
            src-tauri/target/release/bundle/msi/*.msi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload MSI artifact
        uses: actions/upload-artifact@v4
        with:
          name: clipify-windows-msi-${{ steps.version.outputs.version }}
          path: src-tauri/target/release/bundle/msi/*.msi
          retention-days: 30
          
      - name: List build artifacts
        run: |
          echo "Build completed successfully!"
          echo "MSI files:"
          Get-ChildItem -Path "src-tauri/target/release/bundle/msi/" -Filter "*.msi" | ForEach-Object { 
            echo "  - $($_.Name) ($([math]::Round($_.Length / 1MB, 2)) MB)"
          }
