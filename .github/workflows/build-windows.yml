name: Build Windows MSI

on:
  workflow_dispatch:
    inputs:
      release:
        description: "Create release"
        required: false
        default: false
        type: boolean
      version:
        description: "Version tag (e.g., v1.0.0)"
        required: false
        default: ""
        type: string
  push:
    tags:
      - "v*"
  pull_request:
    branches: [main, master]

jobs:
  build-windows-msi:
    runs-on: windows-latest

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install WiX Toolset
        run: |
          Write-Host "Installing WiX Toolset v3.14.1..."

          # Use chocolatey for reliable WiX installation
          Write-Host "Installing WiX via Chocolatey..."
          choco install wixtoolset --version=3.14.1 --force --no-progress

          # Refresh environment variables
          refreshenv

          # Verify installation
          Write-Host "Verifying WiX installation..."
          $wixPath = "${env:ProgramFiles(x86)}\WiX Toolset v3.14\bin"

          if (Test-Path "$wixPath\candle.exe") {
            Write-Host "✅ WiX found at: $wixPath"
            
            # Add to PATH and set environment variables
            echo "$wixPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
            echo "WIX=$wixPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            
            # Test functionality
            try {
              $candleVersion = & "$wixPath\candle.exe" -? 2>&1 | Select-Object -First 1
              Write-Host "✅ Candle version: $candleVersion"
            } catch {
              Write-Warning "WiX tools may have issues: $_"
            }
          } else {
            Write-Error "❌ WiX installation failed"
            exit 1
          }

      - name: Determine version
        id: version
        run: |
          if ("${{ github.event.inputs.version }}" -ne "") {
            $version = "${{ github.event.inputs.version }}"
          } elseif ("${{ github.ref_type }}" -eq "tag") {
            $version = "${{ github.ref_name }}"
          } else {
            $version = "v0.1.0-dev"
          }
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "Version: $version"

      - name: Install frontend dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build:prod

      - name: Build Tauri MSI
        run: |
          Write-Host "Starting Tauri MSI build..."

          # Verify WiX is accessible
          Write-Host "Current WiX environment:"
          Write-Host "  WIX: $env:WIX"
          Write-Host "  PATH contains WiX: $($env:PATH -like '*WiX*')"

          # Verify WiX tools are accessible
          try {
            $candleTest = & "candle.exe" -? 2>&1 | Select-Object -First 1
            Write-Host "✅ WiX candle.exe accessible: $candleTest"
          } catch {
            Write-Host "❌ Cannot access candle.exe: $_"
            
            # Try to find WiX manually
            $possiblePaths = @(
              "${env:ProgramFiles(x86)}\WiX Toolset v3.14\bin",
              "${env:ProgramFiles}\WiX Toolset v3.14\bin",
              "C:\Program Files (x86)\WiX Toolset v3.14\bin"
            )
            
            foreach ($path in $possiblePaths) {
              if (Test-Path "$path\candle.exe") {
                Write-Host "Found WiX at: $path"
                $env:PATH = "$path;$env:PATH"
                break
              }
            }
          }

          # Final verification
          try {
            & "candle.exe" -? | Select-Object -First 1
            Write-Host "✅ WiX tools ready for Tauri build"
          } catch {
            Write-Error "❌ WiX tools still not accessible. Build will likely fail."
          }

          # Build MSI package with Tauri CLI
          Write-Host "Building MSI package..."
          npm run tauri:build -- --bundles msi --verbose
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        if: ${{ github.event.inputs.release == 'true' || github.ref_type == 'tag' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: "Clipify ${{ steps.version.outputs.version }}"
          body: |
            ## Windows MSI Installer

            This release includes a Windows MSI installer for Clipify.

            ### Installation
            1. Download the `.msi` file from the assets below
            2. Run the installer as administrator
            3. Follow the installation wizard

            ### Features
            - Global hotkey support (Cmd+Shift+C)
            - AI-powered text cleanup and rephrasing
            - Secure authentication with JWT tokens
            - System tray integration

            ### System Requirements
            - Windows 10 or later
            - Microsoft Edge WebView2 (automatically installed if missing)
          draft: ${{ github.event.inputs.release != 'true' }}
          prerelease: ${{ contains(steps.version.outputs.version, 'dev') || contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') }}
          files: |
            src-tauri/target/release/bundle/msi/*.msi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload MSI artifact
        uses: actions/upload-artifact@v4
        with:
          name: clipify-windows-msi-${{ steps.version.outputs.version }}
          path: src-tauri/target/release/bundle/msi/*.msi
          retention-days: 30

      - name: List build artifacts
        run: |
          echo "Build completed successfully!"
          echo "MSI files:"
          Get-ChildItem -Path "src-tauri/target/release/bundle/msi/" -Filter "*.msi" | ForEach-Object { 
            echo "  - $($_.Name) ($([math]::Round($_.Length / 1MB, 2)) MB)"
          }
